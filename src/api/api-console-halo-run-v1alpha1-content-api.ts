/* tslint:disable */
/* eslint-disable */
/**
 * Halo Next API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { ContentRequest } from '../models'
// @ts-ignore
import { ContentResponse } from '../models'
/**
 * ApiConsoleHaloRunV1alpha1ContentApi - axios parameter creator
 * @export
 */
export const ApiConsoleHaloRunV1alpha1ContentApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Draft a snapshot content.
     * @param {ContentRequest} contentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    draftSnapshotContent: async (
      contentRequest: ContentRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'contentRequest' is not null or undefined
      assertParamExists('draftSnapshotContent', 'contentRequest', contentRequest)
      const localVarPath = `/apis/api.console.halo.run/v1alpha1/contents`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BasicAuth required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration)

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(contentRequest, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Obtain a snapshot content.
     * @param {string} snapshotName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    obtainSnapshotContent: async (snapshotName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'snapshotName' is not null or undefined
      assertParamExists('obtainSnapshotContent', 'snapshotName', snapshotName)
      const localVarPath = `/apis/api.console.halo.run/v1alpha1/contents/{snapshotName}`.replace(
        `{${'snapshotName'}}`,
        encodeURIComponent(String(snapshotName)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BasicAuth required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration)

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Update a snapshot content.
     * @param {string} snapshotName
     * @param {ContentRequest} contentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSnapshotContent: async (
      snapshotName: string,
      contentRequest: ContentRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'snapshotName' is not null or undefined
      assertParamExists('updateSnapshotContent', 'snapshotName', snapshotName)
      // verify required parameter 'contentRequest' is not null or undefined
      assertParamExists('updateSnapshotContent', 'contentRequest', contentRequest)
      const localVarPath = `/apis/api.console.halo.run/v1alpha1/contents/{snapshotName}`.replace(
        `{${'snapshotName'}}`,
        encodeURIComponent(String(snapshotName)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BasicAuth required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration)

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(contentRequest, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * ApiConsoleHaloRunV1alpha1ContentApi - functional programming interface
 * @export
 */
export const ApiConsoleHaloRunV1alpha1ContentApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ApiConsoleHaloRunV1alpha1ContentApiAxiosParamCreator(configuration)
  return {
    /**
     * Draft a snapshot content.
     * @param {ContentRequest} contentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async draftSnapshotContent(
      contentRequest: ContentRequest,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContentResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.draftSnapshotContent(contentRequest, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * Obtain a snapshot content.
     * @param {string} snapshotName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async obtainSnapshotContent(
      snapshotName: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContentResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.obtainSnapshotContent(snapshotName, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * Update a snapshot content.
     * @param {string} snapshotName
     * @param {ContentRequest} contentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateSnapshotContent(
      snapshotName: string,
      contentRequest: ContentRequest,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContentResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateSnapshotContent(
        snapshotName,
        contentRequest,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * ApiConsoleHaloRunV1alpha1ContentApi - factory interface
 * @export
 */
export const ApiConsoleHaloRunV1alpha1ContentApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = ApiConsoleHaloRunV1alpha1ContentApiFp(configuration)
  return {
    /**
     * Draft a snapshot content.
     * @param {ContentRequest} contentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    draftSnapshotContent(contentRequest: ContentRequest, options?: any): AxiosPromise<ContentResponse> {
      return localVarFp.draftSnapshotContent(contentRequest, options).then((request) => request(axios, basePath))
    },
    /**
     * Obtain a snapshot content.
     * @param {string} snapshotName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    obtainSnapshotContent(snapshotName: string, options?: any): AxiosPromise<ContentResponse> {
      return localVarFp.obtainSnapshotContent(snapshotName, options).then((request) => request(axios, basePath))
    },
    /**
     * Update a snapshot content.
     * @param {string} snapshotName
     * @param {ContentRequest} contentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSnapshotContent(
      snapshotName: string,
      contentRequest: ContentRequest,
      options?: any,
    ): AxiosPromise<ContentResponse> {
      return localVarFp
        .updateSnapshotContent(snapshotName, contentRequest, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * Request parameters for draftSnapshotContent operation in ApiConsoleHaloRunV1alpha1ContentApi.
 * @export
 * @interface ApiConsoleHaloRunV1alpha1ContentApiDraftSnapshotContentRequest
 */
export interface ApiConsoleHaloRunV1alpha1ContentApiDraftSnapshotContentRequest {
  /**
   *
   * @type {ContentRequest}
   * @memberof ApiConsoleHaloRunV1alpha1ContentApiDraftSnapshotContent
   */
  readonly contentRequest: ContentRequest
}

/**
 * Request parameters for obtainSnapshotContent operation in ApiConsoleHaloRunV1alpha1ContentApi.
 * @export
 * @interface ApiConsoleHaloRunV1alpha1ContentApiObtainSnapshotContentRequest
 */
export interface ApiConsoleHaloRunV1alpha1ContentApiObtainSnapshotContentRequest {
  /**
   *
   * @type {string}
   * @memberof ApiConsoleHaloRunV1alpha1ContentApiObtainSnapshotContent
   */
  readonly snapshotName: string
}

/**
 * Request parameters for updateSnapshotContent operation in ApiConsoleHaloRunV1alpha1ContentApi.
 * @export
 * @interface ApiConsoleHaloRunV1alpha1ContentApiUpdateSnapshotContentRequest
 */
export interface ApiConsoleHaloRunV1alpha1ContentApiUpdateSnapshotContentRequest {
  /**
   *
   * @type {string}
   * @memberof ApiConsoleHaloRunV1alpha1ContentApiUpdateSnapshotContent
   */
  readonly snapshotName: string

  /**
   *
   * @type {ContentRequest}
   * @memberof ApiConsoleHaloRunV1alpha1ContentApiUpdateSnapshotContent
   */
  readonly contentRequest: ContentRequest
}

/**
 * ApiConsoleHaloRunV1alpha1ContentApi - object-oriented interface
 * @export
 * @class ApiConsoleHaloRunV1alpha1ContentApi
 * @extends {BaseAPI}
 */
export class ApiConsoleHaloRunV1alpha1ContentApi extends BaseAPI {
  /**
   * Draft a snapshot content.
   * @param {ApiConsoleHaloRunV1alpha1ContentApiDraftSnapshotContentRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ApiConsoleHaloRunV1alpha1ContentApi
   */
  public draftSnapshotContent(
    requestParameters: ApiConsoleHaloRunV1alpha1ContentApiDraftSnapshotContentRequest,
    options?: AxiosRequestConfig,
  ) {
    return ApiConsoleHaloRunV1alpha1ContentApiFp(this.configuration)
      .draftSnapshotContent(requestParameters.contentRequest, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Obtain a snapshot content.
   * @param {ApiConsoleHaloRunV1alpha1ContentApiObtainSnapshotContentRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ApiConsoleHaloRunV1alpha1ContentApi
   */
  public obtainSnapshotContent(
    requestParameters: ApiConsoleHaloRunV1alpha1ContentApiObtainSnapshotContentRequest,
    options?: AxiosRequestConfig,
  ) {
    return ApiConsoleHaloRunV1alpha1ContentApiFp(this.configuration)
      .obtainSnapshotContent(requestParameters.snapshotName, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Update a snapshot content.
   * @param {ApiConsoleHaloRunV1alpha1ContentApiUpdateSnapshotContentRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ApiConsoleHaloRunV1alpha1ContentApi
   */
  public updateSnapshotContent(
    requestParameters: ApiConsoleHaloRunV1alpha1ContentApiUpdateSnapshotContentRequest,
    options?: AxiosRequestConfig,
  ) {
    return ApiConsoleHaloRunV1alpha1ContentApiFp(this.configuration)
      .updateSnapshotContent(requestParameters.snapshotName, requestParameters.contentRequest, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
