/* tslint:disable */
/* eslint-disable */
/**
 * Halo Next API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { Attachment } from '../models'
// @ts-ignore
import { AttachmentList } from '../models'
/**
 * ApiConsoleHaloRunV1alpha1AttachmentApi - axios parameter creator
 * @export
 */
export const ApiConsoleHaloRunV1alpha1AttachmentApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {string} [policy] Name of policy
     * @param {string} [displayName] Display name of attachment
     * @param {string} [uploadedBy] Name of user who uploaded the attachment
     * @param {string} [group] Name of group
     * @param {number} [size] Size of one page. Zero indicates no limit.
     * @param {number} [page] The page number. Zero indicates no page.
     * @param {Array<string>} [labelSelector] Label selector for filtering.
     * @param {Array<string>} [fieldSelector] Field selector for filtering.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAttachments: async (
      policy?: string,
      displayName?: string,
      uploadedBy?: string,
      group?: string,
      size?: number,
      page?: number,
      labelSelector?: Array<string>,
      fieldSelector?: Array<string>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/apis/api.console.halo.run/v1alpha1/attachments`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BasicAuth required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration)

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (policy !== undefined) {
        localVarQueryParameter['policy'] = policy
      }

      if (displayName !== undefined) {
        localVarQueryParameter['displayName'] = displayName
      }

      if (uploadedBy !== undefined) {
        localVarQueryParameter['uploadedBy'] = uploadedBy
      }

      if (group !== undefined) {
        localVarQueryParameter['group'] = group
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (labelSelector) {
        localVarQueryParameter['labelSelector'] = labelSelector
      }

      if (fieldSelector) {
        localVarQueryParameter['fieldSelector'] = fieldSelector
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {any} file
     * @param {string} policyName Storage policy name
     * @param {string} [groupName] The name of the group to which the attachment belongs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadAttachment: async (
      file: any,
      policyName: string,
      groupName?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'file' is not null or undefined
      assertParamExists('uploadAttachment', 'file', file)
      // verify required parameter 'policyName' is not null or undefined
      assertParamExists('uploadAttachment', 'policyName', policyName)
      const localVarPath = `/apis/api.console.halo.run/v1alpha1/attachments/upload`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any
      const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)()

      // authentication BasicAuth required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration)

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (file !== undefined) {
        localVarFormParams.append('file', file as any)
      }

      if (policyName !== undefined) {
        localVarFormParams.append('policyName', policyName as any)
      }

      if (groupName !== undefined) {
        localVarFormParams.append('groupName', groupName as any)
      }

      localVarHeaderParameter['Content-Type'] = 'multipart/form-data'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = localVarFormParams

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * ApiConsoleHaloRunV1alpha1AttachmentApi - functional programming interface
 * @export
 */
export const ApiConsoleHaloRunV1alpha1AttachmentApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ApiConsoleHaloRunV1alpha1AttachmentApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @param {string} [policy] Name of policy
     * @param {string} [displayName] Display name of attachment
     * @param {string} [uploadedBy] Name of user who uploaded the attachment
     * @param {string} [group] Name of group
     * @param {number} [size] Size of one page. Zero indicates no limit.
     * @param {number} [page] The page number. Zero indicates no page.
     * @param {Array<string>} [labelSelector] Label selector for filtering.
     * @param {Array<string>} [fieldSelector] Field selector for filtering.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async searchAttachments(
      policy?: string,
      displayName?: string,
      uploadedBy?: string,
      group?: string,
      size?: number,
      page?: number,
      labelSelector?: Array<string>,
      fieldSelector?: Array<string>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttachmentList>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.searchAttachments(
        policy,
        displayName,
        uploadedBy,
        group,
        size,
        page,
        labelSelector,
        fieldSelector,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @param {any} file
     * @param {string} policyName Storage policy name
     * @param {string} [groupName] The name of the group to which the attachment belongs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async uploadAttachment(
      file: any,
      policyName: string,
      groupName?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Attachment>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.uploadAttachment(file, policyName, groupName, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * ApiConsoleHaloRunV1alpha1AttachmentApi - factory interface
 * @export
 */
export const ApiConsoleHaloRunV1alpha1AttachmentApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = ApiConsoleHaloRunV1alpha1AttachmentApiFp(configuration)
  return {
    /**
     *
     * @param {string} [policy] Name of policy
     * @param {string} [displayName] Display name of attachment
     * @param {string} [uploadedBy] Name of user who uploaded the attachment
     * @param {string} [group] Name of group
     * @param {number} [size] Size of one page. Zero indicates no limit.
     * @param {number} [page] The page number. Zero indicates no page.
     * @param {Array<string>} [labelSelector] Label selector for filtering.
     * @param {Array<string>} [fieldSelector] Field selector for filtering.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAttachments(
      policy?: string,
      displayName?: string,
      uploadedBy?: string,
      group?: string,
      size?: number,
      page?: number,
      labelSelector?: Array<string>,
      fieldSelector?: Array<string>,
      options?: any,
    ): AxiosPromise<AttachmentList> {
      return localVarFp
        .searchAttachments(policy, displayName, uploadedBy, group, size, page, labelSelector, fieldSelector, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {any} file
     * @param {string} policyName Storage policy name
     * @param {string} [groupName] The name of the group to which the attachment belongs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadAttachment(file: any, policyName: string, groupName?: string, options?: any): AxiosPromise<Attachment> {
      return localVarFp
        .uploadAttachment(file, policyName, groupName, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * Request parameters for searchAttachments operation in ApiConsoleHaloRunV1alpha1AttachmentApi.
 * @export
 * @interface ApiConsoleHaloRunV1alpha1AttachmentApiSearchAttachmentsRequest
 */
export interface ApiConsoleHaloRunV1alpha1AttachmentApiSearchAttachmentsRequest {
  /**
   * Name of policy
   * @type {string}
   * @memberof ApiConsoleHaloRunV1alpha1AttachmentApiSearchAttachments
   */
  readonly policy?: string

  /**
   * Display name of attachment
   * @type {string}
   * @memberof ApiConsoleHaloRunV1alpha1AttachmentApiSearchAttachments
   */
  readonly displayName?: string

  /**
   * Name of user who uploaded the attachment
   * @type {string}
   * @memberof ApiConsoleHaloRunV1alpha1AttachmentApiSearchAttachments
   */
  readonly uploadedBy?: string

  /**
   * Name of group
   * @type {string}
   * @memberof ApiConsoleHaloRunV1alpha1AttachmentApiSearchAttachments
   */
  readonly group?: string

  /**
   * Size of one page. Zero indicates no limit.
   * @type {number}
   * @memberof ApiConsoleHaloRunV1alpha1AttachmentApiSearchAttachments
   */
  readonly size?: number

  /**
   * The page number. Zero indicates no page.
   * @type {number}
   * @memberof ApiConsoleHaloRunV1alpha1AttachmentApiSearchAttachments
   */
  readonly page?: number

  /**
   * Label selector for filtering.
   * @type {Array<string>}
   * @memberof ApiConsoleHaloRunV1alpha1AttachmentApiSearchAttachments
   */
  readonly labelSelector?: Array<string>

  /**
   * Field selector for filtering.
   * @type {Array<string>}
   * @memberof ApiConsoleHaloRunV1alpha1AttachmentApiSearchAttachments
   */
  readonly fieldSelector?: Array<string>
}

/**
 * Request parameters for uploadAttachment operation in ApiConsoleHaloRunV1alpha1AttachmentApi.
 * @export
 * @interface ApiConsoleHaloRunV1alpha1AttachmentApiUploadAttachmentRequest
 */
export interface ApiConsoleHaloRunV1alpha1AttachmentApiUploadAttachmentRequest {
  /**
   *
   * @type {any}
   * @memberof ApiConsoleHaloRunV1alpha1AttachmentApiUploadAttachment
   */
  readonly file: any

  /**
   * Storage policy name
   * @type {string}
   * @memberof ApiConsoleHaloRunV1alpha1AttachmentApiUploadAttachment
   */
  readonly policyName: string

  /**
   * The name of the group to which the attachment belongs
   * @type {string}
   * @memberof ApiConsoleHaloRunV1alpha1AttachmentApiUploadAttachment
   */
  readonly groupName?: string
}

/**
 * ApiConsoleHaloRunV1alpha1AttachmentApi - object-oriented interface
 * @export
 * @class ApiConsoleHaloRunV1alpha1AttachmentApi
 * @extends {BaseAPI}
 */
export class ApiConsoleHaloRunV1alpha1AttachmentApi extends BaseAPI {
  /**
   *
   * @param {ApiConsoleHaloRunV1alpha1AttachmentApiSearchAttachmentsRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ApiConsoleHaloRunV1alpha1AttachmentApi
   */
  public searchAttachments(
    requestParameters: ApiConsoleHaloRunV1alpha1AttachmentApiSearchAttachmentsRequest = {},
    options?: AxiosRequestConfig,
  ) {
    return ApiConsoleHaloRunV1alpha1AttachmentApiFp(this.configuration)
      .searchAttachments(
        requestParameters.policy,
        requestParameters.displayName,
        requestParameters.uploadedBy,
        requestParameters.group,
        requestParameters.size,
        requestParameters.page,
        requestParameters.labelSelector,
        requestParameters.fieldSelector,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {ApiConsoleHaloRunV1alpha1AttachmentApiUploadAttachmentRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ApiConsoleHaloRunV1alpha1AttachmentApi
   */
  public uploadAttachment(
    requestParameters: ApiConsoleHaloRunV1alpha1AttachmentApiUploadAttachmentRequest,
    options?: AxiosRequestConfig,
  ) {
    return ApiConsoleHaloRunV1alpha1AttachmentApiFp(this.configuration)
      .uploadAttachment(requestParameters.file, requestParameters.policyName, requestParameters.groupName, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
