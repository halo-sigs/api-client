/* tslint:disable */
/* eslint-disable */
/**
 * Halo Next API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { ListedCommentList } from '../models'
/**
 * ApiHaloRunV1alpha1CommentApi - axios parameter creator
 * @export
 */
export const ApiHaloRunV1alpha1CommentApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * List comments.
     * @param {'LAST_REPLY_TIME' | 'REPLY_COUNT' | 'CREATE_TIME'} [sort] Comment collation.
     * @param {boolean} [hidden] The comment is hidden from the theme side.
     * @param {boolean} [top] Comment top display.
     * @param {boolean} [sortOrder] ascending order If it is true; otherwise, it is in descending order.
     * @param {boolean} [approved] Comments approved.
     * @param {boolean} [allowNotification] Send notifications when there are new replies.
     * @param {string} [ownerKind] Commenter kind.
     * @param {string} [ownerName] Commenter name.
     * @param {string} [subjectKind] Comment subject kind.
     * @param {string} [subjectName] Comment subject name.
     * @param {number} [size] Size of one page. Zero indicates no limit.
     * @param {number} [page] The page number. Zero indicates no page.
     * @param {Array<string>} [labelSelector] Label selector for filtering.
     * @param {Array<string>} [fieldSelector] Field selector for filtering.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listComments: async (
      sort?: 'LAST_REPLY_TIME' | 'REPLY_COUNT' | 'CREATE_TIME',
      hidden?: boolean,
      top?: boolean,
      sortOrder?: boolean,
      approved?: boolean,
      allowNotification?: boolean,
      ownerKind?: string,
      ownerName?: string,
      subjectKind?: string,
      subjectName?: string,
      size?: number,
      page?: number,
      labelSelector?: Array<string>,
      fieldSelector?: Array<string>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/apis/api.halo.run/v1alpha1/comments`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BasicAuth required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration)

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (sort !== undefined) {
        localVarQueryParameter['sort'] = sort
      }

      if (hidden !== undefined) {
        localVarQueryParameter['hidden'] = hidden
      }

      if (top !== undefined) {
        localVarQueryParameter['top'] = top
      }

      if (sortOrder !== undefined) {
        localVarQueryParameter['sortOrder'] = sortOrder
      }

      if (approved !== undefined) {
        localVarQueryParameter['approved'] = approved
      }

      if (allowNotification !== undefined) {
        localVarQueryParameter['allowNotification'] = allowNotification
      }

      if (ownerKind !== undefined) {
        localVarQueryParameter['ownerKind'] = ownerKind
      }

      if (ownerName !== undefined) {
        localVarQueryParameter['ownerName'] = ownerName
      }

      if (subjectKind !== undefined) {
        localVarQueryParameter['subjectKind'] = subjectKind
      }

      if (subjectName !== undefined) {
        localVarQueryParameter['subjectName'] = subjectName
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (labelSelector) {
        localVarQueryParameter['labelSelector'] = labelSelector
      }

      if (fieldSelector) {
        localVarQueryParameter['fieldSelector'] = fieldSelector
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * ApiHaloRunV1alpha1CommentApi - functional programming interface
 * @export
 */
export const ApiHaloRunV1alpha1CommentApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ApiHaloRunV1alpha1CommentApiAxiosParamCreator(configuration)
  return {
    /**
     * List comments.
     * @param {'LAST_REPLY_TIME' | 'REPLY_COUNT' | 'CREATE_TIME'} [sort] Comment collation.
     * @param {boolean} [hidden] The comment is hidden from the theme side.
     * @param {boolean} [top] Comment top display.
     * @param {boolean} [sortOrder] ascending order If it is true; otherwise, it is in descending order.
     * @param {boolean} [approved] Comments approved.
     * @param {boolean} [allowNotification] Send notifications when there are new replies.
     * @param {string} [ownerKind] Commenter kind.
     * @param {string} [ownerName] Commenter name.
     * @param {string} [subjectKind] Comment subject kind.
     * @param {string} [subjectName] Comment subject name.
     * @param {number} [size] Size of one page. Zero indicates no limit.
     * @param {number} [page] The page number. Zero indicates no page.
     * @param {Array<string>} [labelSelector] Label selector for filtering.
     * @param {Array<string>} [fieldSelector] Field selector for filtering.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listComments(
      sort?: 'LAST_REPLY_TIME' | 'REPLY_COUNT' | 'CREATE_TIME',
      hidden?: boolean,
      top?: boolean,
      sortOrder?: boolean,
      approved?: boolean,
      allowNotification?: boolean,
      ownerKind?: string,
      ownerName?: string,
      subjectKind?: string,
      subjectName?: string,
      size?: number,
      page?: number,
      labelSelector?: Array<string>,
      fieldSelector?: Array<string>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListedCommentList>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listComments(
        sort,
        hidden,
        top,
        sortOrder,
        approved,
        allowNotification,
        ownerKind,
        ownerName,
        subjectKind,
        subjectName,
        size,
        page,
        labelSelector,
        fieldSelector,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * ApiHaloRunV1alpha1CommentApi - factory interface
 * @export
 */
export const ApiHaloRunV1alpha1CommentApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = ApiHaloRunV1alpha1CommentApiFp(configuration)
  return {
    /**
     * List comments.
     * @param {'LAST_REPLY_TIME' | 'REPLY_COUNT' | 'CREATE_TIME'} [sort] Comment collation.
     * @param {boolean} [hidden] The comment is hidden from the theme side.
     * @param {boolean} [top] Comment top display.
     * @param {boolean} [sortOrder] ascending order If it is true; otherwise, it is in descending order.
     * @param {boolean} [approved] Comments approved.
     * @param {boolean} [allowNotification] Send notifications when there are new replies.
     * @param {string} [ownerKind] Commenter kind.
     * @param {string} [ownerName] Commenter name.
     * @param {string} [subjectKind] Comment subject kind.
     * @param {string} [subjectName] Comment subject name.
     * @param {number} [size] Size of one page. Zero indicates no limit.
     * @param {number} [page] The page number. Zero indicates no page.
     * @param {Array<string>} [labelSelector] Label selector for filtering.
     * @param {Array<string>} [fieldSelector] Field selector for filtering.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listComments(
      sort?: 'LAST_REPLY_TIME' | 'REPLY_COUNT' | 'CREATE_TIME',
      hidden?: boolean,
      top?: boolean,
      sortOrder?: boolean,
      approved?: boolean,
      allowNotification?: boolean,
      ownerKind?: string,
      ownerName?: string,
      subjectKind?: string,
      subjectName?: string,
      size?: number,
      page?: number,
      labelSelector?: Array<string>,
      fieldSelector?: Array<string>,
      options?: any,
    ): AxiosPromise<ListedCommentList> {
      return localVarFp
        .listComments(
          sort,
          hidden,
          top,
          sortOrder,
          approved,
          allowNotification,
          ownerKind,
          ownerName,
          subjectKind,
          subjectName,
          size,
          page,
          labelSelector,
          fieldSelector,
          options,
        )
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * Request parameters for listComments operation in ApiHaloRunV1alpha1CommentApi.
 * @export
 * @interface ApiHaloRunV1alpha1CommentApiListCommentsRequest
 */
export interface ApiHaloRunV1alpha1CommentApiListCommentsRequest {
  /**
   * Comment collation.
   * @type {'LAST_REPLY_TIME' | 'REPLY_COUNT' | 'CREATE_TIME'}
   * @memberof ApiHaloRunV1alpha1CommentApiListComments
   */
  readonly sort?: 'LAST_REPLY_TIME' | 'REPLY_COUNT' | 'CREATE_TIME'

  /**
   * The comment is hidden from the theme side.
   * @type {boolean}
   * @memberof ApiHaloRunV1alpha1CommentApiListComments
   */
  readonly hidden?: boolean

  /**
   * Comment top display.
   * @type {boolean}
   * @memberof ApiHaloRunV1alpha1CommentApiListComments
   */
  readonly top?: boolean

  /**
   * ascending order If it is true; otherwise, it is in descending order.
   * @type {boolean}
   * @memberof ApiHaloRunV1alpha1CommentApiListComments
   */
  readonly sortOrder?: boolean

  /**
   * Comments approved.
   * @type {boolean}
   * @memberof ApiHaloRunV1alpha1CommentApiListComments
   */
  readonly approved?: boolean

  /**
   * Send notifications when there are new replies.
   * @type {boolean}
   * @memberof ApiHaloRunV1alpha1CommentApiListComments
   */
  readonly allowNotification?: boolean

  /**
   * Commenter kind.
   * @type {string}
   * @memberof ApiHaloRunV1alpha1CommentApiListComments
   */
  readonly ownerKind?: string

  /**
   * Commenter name.
   * @type {string}
   * @memberof ApiHaloRunV1alpha1CommentApiListComments
   */
  readonly ownerName?: string

  /**
   * Comment subject kind.
   * @type {string}
   * @memberof ApiHaloRunV1alpha1CommentApiListComments
   */
  readonly subjectKind?: string

  /**
   * Comment subject name.
   * @type {string}
   * @memberof ApiHaloRunV1alpha1CommentApiListComments
   */
  readonly subjectName?: string

  /**
   * Size of one page. Zero indicates no limit.
   * @type {number}
   * @memberof ApiHaloRunV1alpha1CommentApiListComments
   */
  readonly size?: number

  /**
   * The page number. Zero indicates no page.
   * @type {number}
   * @memberof ApiHaloRunV1alpha1CommentApiListComments
   */
  readonly page?: number

  /**
   * Label selector for filtering.
   * @type {Array<string>}
   * @memberof ApiHaloRunV1alpha1CommentApiListComments
   */
  readonly labelSelector?: Array<string>

  /**
   * Field selector for filtering.
   * @type {Array<string>}
   * @memberof ApiHaloRunV1alpha1CommentApiListComments
   */
  readonly fieldSelector?: Array<string>
}

/**
 * ApiHaloRunV1alpha1CommentApi - object-oriented interface
 * @export
 * @class ApiHaloRunV1alpha1CommentApi
 * @extends {BaseAPI}
 */
export class ApiHaloRunV1alpha1CommentApi extends BaseAPI {
  /**
   * List comments.
   * @param {ApiHaloRunV1alpha1CommentApiListCommentsRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ApiHaloRunV1alpha1CommentApi
   */
  public listComments(
    requestParameters: ApiHaloRunV1alpha1CommentApiListCommentsRequest = {},
    options?: AxiosRequestConfig,
  ) {
    return ApiHaloRunV1alpha1CommentApiFp(this.configuration)
      .listComments(
        requestParameters.sort,
        requestParameters.hidden,
        requestParameters.top,
        requestParameters.sortOrder,
        requestParameters.approved,
        requestParameters.allowNotification,
        requestParameters.ownerKind,
        requestParameters.ownerName,
        requestParameters.subjectKind,
        requestParameters.subjectName,
        requestParameters.size,
        requestParameters.page,
        requestParameters.labelSelector,
        requestParameters.fieldSelector,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }
}
