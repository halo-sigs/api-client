/* tslint:disable */
/* eslint-disable */
/**
 * Halo Next API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { LinkGroup } from '../models'
/**
 * CoreHaloRunV1alpha1LinkGroupApi - axios parameter creator
 * @export
 */
export const CoreHaloRunV1alpha1LinkGroupApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Create core.halo.run/v1alpha1/LinkGroup
     * @param {LinkGroup} [linkGroup] Fresh linkgroup
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createcoreHaloRunV1alpha1LinkGroup: async (
      linkGroup?: LinkGroup,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/apis/core.halo.run/v1alpha1/linkgroups`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BasicAuth required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration)

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(linkGroup, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Delete core.halo.run/v1alpha1/LinkGroup
     * @param {string} name Name of linkgroup
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletecoreHaloRunV1alpha1LinkGroup: async (
      name: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'name' is not null or undefined
      assertParamExists('deletecoreHaloRunV1alpha1LinkGroup', 'name', name)
      const localVarPath = `/apis/core.halo.run/v1alpha1/linkgroups/{name}`.replace(
        `{${'name'}}`,
        encodeURIComponent(String(name)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BasicAuth required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration)

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Get core.halo.run/v1alpha1/LinkGroup
     * @param {string} name Name of linkgroup
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getcoreHaloRunV1alpha1LinkGroup: async (name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'name' is not null or undefined
      assertParamExists('getcoreHaloRunV1alpha1LinkGroup', 'name', name)
      const localVarPath = `/apis/core.halo.run/v1alpha1/linkgroups/{name}`.replace(
        `{${'name'}}`,
        encodeURIComponent(String(name)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BasicAuth required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration)

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * List core.halo.run/v1alpha1/LinkGroup
     * @param {number} [page] The page number. Zero indicates no page.
     * @param {number} [size] Size of one page. Zero indicates no limit.
     * @param {Array<string>} [labelSelector] Label selector for filtering.
     * @param {Array<string>} [fieldSelector] Field selector for filtering.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listcoreHaloRunV1alpha1LinkGroup: async (
      page?: number,
      size?: number,
      labelSelector?: Array<string>,
      fieldSelector?: Array<string>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/apis/core.halo.run/v1alpha1/linkgroups`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BasicAuth required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration)

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (labelSelector) {
        localVarQueryParameter['labelSelector'] = labelSelector
      }

      if (fieldSelector) {
        localVarQueryParameter['fieldSelector'] = fieldSelector
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Update core.halo.run/v1alpha1/LinkGroup
     * @param {string} name Name of linkgroup
     * @param {LinkGroup} [linkGroup] Updated linkgroup
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatecoreHaloRunV1alpha1LinkGroup: async (
      name: string,
      linkGroup?: LinkGroup,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'name' is not null or undefined
      assertParamExists('updatecoreHaloRunV1alpha1LinkGroup', 'name', name)
      const localVarPath = `/apis/core.halo.run/v1alpha1/linkgroups/{name}`.replace(
        `{${'name'}}`,
        encodeURIComponent(String(name)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BasicAuth required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration)

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(linkGroup, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * CoreHaloRunV1alpha1LinkGroupApi - functional programming interface
 * @export
 */
export const CoreHaloRunV1alpha1LinkGroupApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = CoreHaloRunV1alpha1LinkGroupApiAxiosParamCreator(configuration)
  return {
    /**
     * Create core.halo.run/v1alpha1/LinkGroup
     * @param {LinkGroup} [linkGroup] Fresh linkgroup
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createcoreHaloRunV1alpha1LinkGroup(
      linkGroup?: LinkGroup,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LinkGroup>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createcoreHaloRunV1alpha1LinkGroup(linkGroup, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * Delete core.halo.run/v1alpha1/LinkGroup
     * @param {string} name Name of linkgroup
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deletecoreHaloRunV1alpha1LinkGroup(
      name: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deletecoreHaloRunV1alpha1LinkGroup(name, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * Get core.halo.run/v1alpha1/LinkGroup
     * @param {string} name Name of linkgroup
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getcoreHaloRunV1alpha1LinkGroup(
      name: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LinkGroup>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getcoreHaloRunV1alpha1LinkGroup(name, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * List core.halo.run/v1alpha1/LinkGroup
     * @param {number} [page] The page number. Zero indicates no page.
     * @param {number} [size] Size of one page. Zero indicates no limit.
     * @param {Array<string>} [labelSelector] Label selector for filtering.
     * @param {Array<string>} [fieldSelector] Field selector for filtering.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listcoreHaloRunV1alpha1LinkGroup(
      page?: number,
      size?: number,
      labelSelector?: Array<string>,
      fieldSelector?: Array<string>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listcoreHaloRunV1alpha1LinkGroup(
        page,
        size,
        labelSelector,
        fieldSelector,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * Update core.halo.run/v1alpha1/LinkGroup
     * @param {string} name Name of linkgroup
     * @param {LinkGroup} [linkGroup] Updated linkgroup
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updatecoreHaloRunV1alpha1LinkGroup(
      name: string,
      linkGroup?: LinkGroup,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LinkGroup>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updatecoreHaloRunV1alpha1LinkGroup(
        name,
        linkGroup,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * CoreHaloRunV1alpha1LinkGroupApi - factory interface
 * @export
 */
export const CoreHaloRunV1alpha1LinkGroupApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = CoreHaloRunV1alpha1LinkGroupApiFp(configuration)
  return {
    /**
     * Create core.halo.run/v1alpha1/LinkGroup
     * @param {LinkGroup} [linkGroup] Fresh linkgroup
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createcoreHaloRunV1alpha1LinkGroup(linkGroup?: LinkGroup, options?: any): AxiosPromise<LinkGroup> {
      return localVarFp
        .createcoreHaloRunV1alpha1LinkGroup(linkGroup, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Delete core.halo.run/v1alpha1/LinkGroup
     * @param {string} name Name of linkgroup
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletecoreHaloRunV1alpha1LinkGroup(name: string, options?: any): AxiosPromise<void> {
      return localVarFp.deletecoreHaloRunV1alpha1LinkGroup(name, options).then((request) => request(axios, basePath))
    },
    /**
     * Get core.halo.run/v1alpha1/LinkGroup
     * @param {string} name Name of linkgroup
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getcoreHaloRunV1alpha1LinkGroup(name: string, options?: any): AxiosPromise<LinkGroup> {
      return localVarFp.getcoreHaloRunV1alpha1LinkGroup(name, options).then((request) => request(axios, basePath))
    },
    /**
     * List core.halo.run/v1alpha1/LinkGroup
     * @param {number} [page] The page number. Zero indicates no page.
     * @param {number} [size] Size of one page. Zero indicates no limit.
     * @param {Array<string>} [labelSelector] Label selector for filtering.
     * @param {Array<string>} [fieldSelector] Field selector for filtering.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listcoreHaloRunV1alpha1LinkGroup(
      page?: number,
      size?: number,
      labelSelector?: Array<string>,
      fieldSelector?: Array<string>,
      options?: any,
    ): AxiosPromise<string> {
      return localVarFp
        .listcoreHaloRunV1alpha1LinkGroup(page, size, labelSelector, fieldSelector, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Update core.halo.run/v1alpha1/LinkGroup
     * @param {string} name Name of linkgroup
     * @param {LinkGroup} [linkGroup] Updated linkgroup
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatecoreHaloRunV1alpha1LinkGroup(name: string, linkGroup?: LinkGroup, options?: any): AxiosPromise<LinkGroup> {
      return localVarFp
        .updatecoreHaloRunV1alpha1LinkGroup(name, linkGroup, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * Request parameters for createcoreHaloRunV1alpha1LinkGroup operation in CoreHaloRunV1alpha1LinkGroupApi.
 * @export
 * @interface CoreHaloRunV1alpha1LinkGroupApiCreatecoreHaloRunV1alpha1LinkGroupRequest
 */
export interface CoreHaloRunV1alpha1LinkGroupApiCreatecoreHaloRunV1alpha1LinkGroupRequest {
  /**
   * Fresh linkgroup
   * @type {LinkGroup}
   * @memberof CoreHaloRunV1alpha1LinkGroupApiCreatecoreHaloRunV1alpha1LinkGroup
   */
  readonly linkGroup?: LinkGroup
}

/**
 * Request parameters for deletecoreHaloRunV1alpha1LinkGroup operation in CoreHaloRunV1alpha1LinkGroupApi.
 * @export
 * @interface CoreHaloRunV1alpha1LinkGroupApiDeletecoreHaloRunV1alpha1LinkGroupRequest
 */
export interface CoreHaloRunV1alpha1LinkGroupApiDeletecoreHaloRunV1alpha1LinkGroupRequest {
  /**
   * Name of linkgroup
   * @type {string}
   * @memberof CoreHaloRunV1alpha1LinkGroupApiDeletecoreHaloRunV1alpha1LinkGroup
   */
  readonly name: string
}

/**
 * Request parameters for getcoreHaloRunV1alpha1LinkGroup operation in CoreHaloRunV1alpha1LinkGroupApi.
 * @export
 * @interface CoreHaloRunV1alpha1LinkGroupApiGetcoreHaloRunV1alpha1LinkGroupRequest
 */
export interface CoreHaloRunV1alpha1LinkGroupApiGetcoreHaloRunV1alpha1LinkGroupRequest {
  /**
   * Name of linkgroup
   * @type {string}
   * @memberof CoreHaloRunV1alpha1LinkGroupApiGetcoreHaloRunV1alpha1LinkGroup
   */
  readonly name: string
}

/**
 * Request parameters for listcoreHaloRunV1alpha1LinkGroup operation in CoreHaloRunV1alpha1LinkGroupApi.
 * @export
 * @interface CoreHaloRunV1alpha1LinkGroupApiListcoreHaloRunV1alpha1LinkGroupRequest
 */
export interface CoreHaloRunV1alpha1LinkGroupApiListcoreHaloRunV1alpha1LinkGroupRequest {
  /**
   * The page number. Zero indicates no page.
   * @type {number}
   * @memberof CoreHaloRunV1alpha1LinkGroupApiListcoreHaloRunV1alpha1LinkGroup
   */
  readonly page?: number

  /**
   * Size of one page. Zero indicates no limit.
   * @type {number}
   * @memberof CoreHaloRunV1alpha1LinkGroupApiListcoreHaloRunV1alpha1LinkGroup
   */
  readonly size?: number

  /**
   * Label selector for filtering.
   * @type {Array<string>}
   * @memberof CoreHaloRunV1alpha1LinkGroupApiListcoreHaloRunV1alpha1LinkGroup
   */
  readonly labelSelector?: Array<string>

  /**
   * Field selector for filtering.
   * @type {Array<string>}
   * @memberof CoreHaloRunV1alpha1LinkGroupApiListcoreHaloRunV1alpha1LinkGroup
   */
  readonly fieldSelector?: Array<string>
}

/**
 * Request parameters for updatecoreHaloRunV1alpha1LinkGroup operation in CoreHaloRunV1alpha1LinkGroupApi.
 * @export
 * @interface CoreHaloRunV1alpha1LinkGroupApiUpdatecoreHaloRunV1alpha1LinkGroupRequest
 */
export interface CoreHaloRunV1alpha1LinkGroupApiUpdatecoreHaloRunV1alpha1LinkGroupRequest {
  /**
   * Name of linkgroup
   * @type {string}
   * @memberof CoreHaloRunV1alpha1LinkGroupApiUpdatecoreHaloRunV1alpha1LinkGroup
   */
  readonly name: string

  /**
   * Updated linkgroup
   * @type {LinkGroup}
   * @memberof CoreHaloRunV1alpha1LinkGroupApiUpdatecoreHaloRunV1alpha1LinkGroup
   */
  readonly linkGroup?: LinkGroup
}

/**
 * CoreHaloRunV1alpha1LinkGroupApi - object-oriented interface
 * @export
 * @class CoreHaloRunV1alpha1LinkGroupApi
 * @extends {BaseAPI}
 */
export class CoreHaloRunV1alpha1LinkGroupApi extends BaseAPI {
  /**
   * Create core.halo.run/v1alpha1/LinkGroup
   * @param {CoreHaloRunV1alpha1LinkGroupApiCreatecoreHaloRunV1alpha1LinkGroupRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoreHaloRunV1alpha1LinkGroupApi
   */
  public createcoreHaloRunV1alpha1LinkGroup(
    requestParameters: CoreHaloRunV1alpha1LinkGroupApiCreatecoreHaloRunV1alpha1LinkGroupRequest = {},
    options?: AxiosRequestConfig,
  ) {
    return CoreHaloRunV1alpha1LinkGroupApiFp(this.configuration)
      .createcoreHaloRunV1alpha1LinkGroup(requestParameters.linkGroup, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Delete core.halo.run/v1alpha1/LinkGroup
   * @param {CoreHaloRunV1alpha1LinkGroupApiDeletecoreHaloRunV1alpha1LinkGroupRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoreHaloRunV1alpha1LinkGroupApi
   */
  public deletecoreHaloRunV1alpha1LinkGroup(
    requestParameters: CoreHaloRunV1alpha1LinkGroupApiDeletecoreHaloRunV1alpha1LinkGroupRequest,
    options?: AxiosRequestConfig,
  ) {
    return CoreHaloRunV1alpha1LinkGroupApiFp(this.configuration)
      .deletecoreHaloRunV1alpha1LinkGroup(requestParameters.name, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Get core.halo.run/v1alpha1/LinkGroup
   * @param {CoreHaloRunV1alpha1LinkGroupApiGetcoreHaloRunV1alpha1LinkGroupRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoreHaloRunV1alpha1LinkGroupApi
   */
  public getcoreHaloRunV1alpha1LinkGroup(
    requestParameters: CoreHaloRunV1alpha1LinkGroupApiGetcoreHaloRunV1alpha1LinkGroupRequest,
    options?: AxiosRequestConfig,
  ) {
    return CoreHaloRunV1alpha1LinkGroupApiFp(this.configuration)
      .getcoreHaloRunV1alpha1LinkGroup(requestParameters.name, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * List core.halo.run/v1alpha1/LinkGroup
   * @param {CoreHaloRunV1alpha1LinkGroupApiListcoreHaloRunV1alpha1LinkGroupRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoreHaloRunV1alpha1LinkGroupApi
   */
  public listcoreHaloRunV1alpha1LinkGroup(
    requestParameters: CoreHaloRunV1alpha1LinkGroupApiListcoreHaloRunV1alpha1LinkGroupRequest = {},
    options?: AxiosRequestConfig,
  ) {
    return CoreHaloRunV1alpha1LinkGroupApiFp(this.configuration)
      .listcoreHaloRunV1alpha1LinkGroup(
        requestParameters.page,
        requestParameters.size,
        requestParameters.labelSelector,
        requestParameters.fieldSelector,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Update core.halo.run/v1alpha1/LinkGroup
   * @param {CoreHaloRunV1alpha1LinkGroupApiUpdatecoreHaloRunV1alpha1LinkGroupRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoreHaloRunV1alpha1LinkGroupApi
   */
  public updatecoreHaloRunV1alpha1LinkGroup(
    requestParameters: CoreHaloRunV1alpha1LinkGroupApiUpdatecoreHaloRunV1alpha1LinkGroupRequest,
    options?: AxiosRequestConfig,
  ) {
    return CoreHaloRunV1alpha1LinkGroupApiFp(this.configuration)
      .updatecoreHaloRunV1alpha1LinkGroup(requestParameters.name, requestParameters.linkGroup, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
